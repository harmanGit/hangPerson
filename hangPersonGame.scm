#lang scheme
(define (chooseWord)
  (let ((lst '("programming" "imperative" "functional" "logic" "declarative" "scripting" "prolog" "lexical" "syntactical" "branching")))
       (list-ref lst (random (length lst)))))

(define (play)
  (let ((word (chooseWord)) (blanks '("")))
       (string->list word)
       (for ([i word])
             (display "_ ")
             (set! blanks (append blanks '("_ "))))
    (display word)
    (display blanks)
    (display (length blanks))
    (guess word blanks 10)))

(define (guess word guessedList tries)
  (display "\n Guess a letter:")
  (let ((letter (read-line))
        (count 1))
       (for ([i word])
         (if (string=? letter (make-string 1 i))
             (set! guessedList (list-set guessedList count letter))
             (display ""))
         (set! count (add1 count)))
  (display guessedList)
  (display tries)
  (if (equal? tries 3)
      (display "Sorry, you lost!")
      (guess word guessedList tries))))